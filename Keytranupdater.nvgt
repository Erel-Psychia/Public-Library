//Keytran library updater
void main()
{
//Display a window
show_window("Updating keytran");
//Create a datastream
datastream d;
//Export the nvgt configuration into the datastream
script_dump_engine_configuration(d);
//Part 1 of keytran
string r="//Key code and key name translation

//Classes
class keytran
{
//Keytran class
//Private original key name and code dictionary
private dictionary a;
//Private friendly key name and code dictionary
private dictionary b;

//This complex constructor must be treated with care!
keytran()
{
";
//Part 2 of keytran
//Obtain the text of the datastream as a list of strings
string[] data=d.str().split("\n");
//Obtain the length of the list
uint l=data.length();
//Start a loop
for(uint c=0; c<l; c++)
{
//Keep the window up to date
wait(1);
//Obtain each item in the current string in the list
string[] list=data[c].split(" ");
//Ensure that the current items are key code specifications
if(list[0]=="enumval"&&list[1].starts_with("key"))
{
//Store the digit of the key code
int i=parse_float(list[3]);
//Store the original key name and code
r+="a.set(\""+list[2]+"\", "+i+");\n";
r+="a.set(\""+i+"\", \""+list[2]+"\");\n";
//Store the copy of the key code's name and make it friendly
string n=list[2].lower_this();
//Remove the prefixes in the friendly name
if(n.starts_with("key_"))
n.erase(0, 4);
else if(n.starts_with("keymod_"))
n.erase(0, 7);
//Convert short names into friendly names
if(n=="lshift")
n="left shift";
if(n=="rshift")
n="right shift";
if(n=="lctrl")
n="left control";
if(n=="rctrl")
n="right control";
if(n=="lalt")
n="left alt";
if(n=="ralt")
n="right alt";
if(n=="lgui")
n="left gui";
if(n=="rgui")
n="right gui";
if(n=="num")
n="numpad";
if(n=="caps")
n="caps lock";
if(n=="return")
n="enter";
if(n=="leftbracket")
n="left bracket";
if(n=="rightbracket")
n="right bracket";
if(n=="capslock")
n="caps lock";
if(n=="printscreen")
n="print screen";
if(n=="scrolllock")
n="scroll lock";
if(n=="pageup")
n="page up";
if(n=="pagedown")
n="page down";
if(n=="numlockclear")
n="num lock";
if(n=="volumeup")
n="volume up";
if(n=="volumedown")
n="volume down";
//Replace underscores with spaces
n=n.replace_this("_", " ");
//Then, store the friendly key name and code
r+="b.set(\""+n+"\", "+i+");\n";
r+="b.set(\""+i+"\", \""+n+"\");\n";
}
}
//Part 3 of keytran
r+="}

//Destroy the dictionaries
~keytran()
{
a.delete_all();
b.delete_all();
}

//Get the code of a key based on it's original name
int code(string n)
{
int r;
a.get(n, r);
return r;
}

//Get the code of a key based on it's friendly name
int codef(string n)
{
int r;
b.get(n, r);
return r;
}

//Get the original name of a key based on it's key code
string name(int k)
{
string n=k;
string r;
a.get(n, r);
return r;
}

//Get the friendly name of a key based on it's key code
string namef(int k)
{
string n=k;
string r;
b.get(n, r);
return r;
}

//End
}

//End
";
//Save the program
file f;
f.open("Keytran.nvgt", "w");
f.write(r);
//Clear the memory
d.close();
f.close();
r="";
data.resize(0);
garbage_collect();
alert("", "Keytran library updated");
}

//End
