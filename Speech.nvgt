//Speech related functions

//Global variables
//Is screen reader used
bool sr=false;
//Text to speech object
tts_voice sp;
//Voice volume, start as 100
uint8 sv=100;

//Speak a given number, with options to specify if the previous text will be interrupted, and if should the program wait until the speech is over
void spe(float t, bool i=true, bool w=false)
{
string s=t;
spe(s, i, w);
}

//Speak a given text, with options to specify if the previous text will be interrupted, and if should the program wait until the speech is over
void spe(string t, bool i=true, bool w=false)
{
//Replace a blank text with the word blank
if(t=="")
t="Blank";
//If a screen reader is used, speak with the screen reader
if(sr==true)
{
//Ensure that the screen reader is available before speaking
if(SCREEN_READER_AVAILABLE)
{
screen_reader_output(t, i);
return;
}
//Otherwise, set the screen reader boolean to false
else
sr=false;
}
//If the speech volume is not set to the specified volume, adjust the volume accordingly
if(sp.get_volume()!=sv)
sp.set_volume(sv);
//Finally, speak the text using the voice object
if(w==true)
sp.speak_wait(t, i);
else
sp.speak(t, i);
}

//Stop speech
void stp()
{
sp.stop();
//If the speech is not stopped after is it asked to stop, attempt to lower it's volume to the minimum and make it speak silently
if(sp.get_speaking()&&sp.get_volume()>0)
{
sp.set_volume(0);
sp.speak("stop", true);
}
}

//Function shortcut to configure voice, rate, pitch and volume
void cf(uint16 a=0, int8 b=0, int8 c=0, uint8 d=0)
{
sp.set_voice(a);
sp.set_rate(b);
sp.set_pitch(c);
sv=d;
}

//End
